{"version":3,"file":"static/js/550.4edf5af3.chunk.js","mappings":"8SAEaA,EAAS,mCAAG,6GAEAC,EAAAA,EAAAA,IACnB,0FAHmB,cAEfC,EAFe,yBAKdA,EAAOC,MALO,wHAAH,qDAWhBC,EAAS,mCAAG,WAAMC,GAAN,uFACGJ,EAAAA,EAAAA,IAAA,6CACqBI,EADrB,qEADH,cACVC,EADU,yBAITA,GAJS,2CAAH,sDAOFC,EAAc,SAACF,EAAIG,EAASC,GACvC,IACEL,EAAUC,GAAIK,MAAK,SAAAJ,GACjBE,EAAQF,EAAKH,KACd,GAGF,CAFC,MAAOQ,GACPF,EAASE,EACV,CACF,EAEKC,EAAW,mCAAG,WAAMP,GAAN,uFACGJ,EAAAA,EAAAA,IAAA,6CACmBI,EADnB,qEADH,cACZQ,EADY,yBAIXA,GAJW,2CAAH,sDAOJC,EAAgB,SAACT,EAAIU,EAAWN,GAC3C,IACEG,EAAYP,GAAIK,MAAK,SAAAG,GACnBE,EAAUF,EAAOV,KAClB,GAGF,CAFC,MAAOQ,GACPF,EAASE,EACV,CACF,EAEKK,EAAU,mCAAG,WAAMX,GAAN,uFACGJ,EAAAA,EAAAA,IAAA,6CACoBI,EADpB,6DADH,cACXY,EADW,yBAIVA,GAJU,2CAAH,sDAOHC,EAAe,SAACb,EAAIc,EAAUV,GACzC,IACEO,EAAWX,GAAIK,MAAK,SAAAO,GAClBE,EAASF,EAAMd,KAChB,GAGF,CAFC,MAAOQ,GACPF,EAASE,EACV,CACF,EAEKS,EAAW,mCAAG,WAAMC,GAAN,uFACGpB,EAAAA,EAAAA,IAAA,0DACgCoB,EADhC,wFADH,cACZC,EADY,yBAIXA,GAJW,2CAAH,sDAOJC,EAAqB,SAACF,EAAOG,EAAUf,GAClD,IACEW,EAAYC,GAAOX,MAAK,SAAAe,GACtBD,EAASC,GACTC,QAAQC,IAAIF,EACb,GAGF,CAFC,MAAOd,GACPF,EAASE,EAAMiB,QAChB,CACF,C,iIC9EYC,EAAUC,EAAAA,EAAAA,IAAH,4FAMPC,EAAMD,EAAAA,EAAAA,IAAH,2D,SCAD,SAASE,IACtB,OAAwBC,EAAAA,EAAAA,YAAxB,eAAO3B,EAAP,KAAaE,EAAb,KACA,GAA0ByB,EAAAA,EAAAA,UAAS,MAAnC,eAAOtB,EAAP,KAAcF,EAAd,KAEQyB,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,YACR7B,EAAAA,EAAAA,IAAY2B,EAAS1B,EAASC,EAC/B,GAAE,CAACyB,KAGF,2BACG5B,GACC,wBACGA,EAAKA,KAAK+B,KAAI,YAA4C,IAAzChC,EAAwC,EAAxCA,GAAIiC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACrC,OACE,0BACGA,GACC,SAACX,EAAD,WACE,SAACE,EAAD,CAAKU,IAAG,UAtBb,+BAsBa,OArBZ,SAqBY,OAAwBD,GAAgBE,IAAI,QAGtD,wCAEF,uBAAIJ,KACJ,uCAAeC,OATRlC,EAYZ,OAGH,4DAGDM,IAAS,gDAGf,C","sources":["Shared/API/fetcher.jsx","components/CastContent/CastContent.styled.jsx","components/CastContent/CastContent.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const getMovies = async () => {\n  try {\n    const movies = await axios.get(\n      'https://api.themoviedb.org/3/trending/all/day?api_key=6eb99de4e2c3a3cd0d9a0ef8005c8dec'\n    );\n    return movies.data;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst fetchCast = async id => {\n  const cast = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=6eb99de4e2c3a3cd0d9a0ef8005c8dec&language=en-US`\n  );\n  return cast;\n};\n\nexport const getCastById = (id, setCast, setError) => {\n  try {\n    fetchCast(id).then(cast => {\n      setCast(cast.data);\n    });\n  } catch (error) {\n    setError(error);\n  }\n};\n\nconst fetchReview = async id => {\n  const review = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=6eb99de4e2c3a3cd0d9a0ef8005c8dec&language=en-US`\n  );\n  return review;\n};\n\nexport const getReviewById = (id, setReview, setError) => {\n  try {\n    fetchReview(id).then(review => {\n      setReview(review.data);\n    });\n  } catch (error) {\n    setError(error);\n  }\n};\n\nconst fetchMovie = async id => {\n  const movie = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=6eb99de4e2c3a3cd0d9a0ef8005c8dec&language=en-US`\n  );\n  return movie;\n};\n\nexport const getMovieById = (id, setMovie, setError) => {\n  try {\n    fetchMovie(id).then(movie => {\n      setMovie(movie.data);\n    });\n  } catch (error) {\n    setError(error);\n  }\n};\n\nconst searchMovie = async query => {\n  const result = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=6eb99de4e2c3a3cd0d9a0ef8005c8dec&language=en-US&page=1&include_adult=false`\n  );\n  return result;\n};\n\nexport const searchMovieByQuery = (query, setState, setError) => {\n  try {\n    searchMovie(query).then(res => {\n      setState(res);\n      console.log(res);\n    });\n  } catch (error) {\n    setError(error.message);\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const ImgWrap = styled.div`\n  width: 100px;\n  height: 150px;\n  background-color: papayawhip;\n`;\n\nexport const Img = styled.img`\n  width: 100px;\n  height: 150px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getCastById } from 'Shared/API/fetcher';\nimport { ImgWrap, Img } from './CastContent.styled';\n\nconst imgUrl = 'https://image.tmdb.org/t/p/';\nconst imgSize = 'w300/';\n\nexport default function CastContent() {\n  const [cast, setCast] = useState();\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getCastById(movieId, setCast, setError);\n  }, [movieId]);\n\n  return (\n    <div>\n      {cast ? (\n        <ul>\n          {cast.cast.map(({ id, name, character, profile_path }) => {\n            return (\n              <li key={id}>\n                {profile_path ? (\n                  <ImgWrap>\n                    <Img src={`${imgUrl}${imgSize}${profile_path}`} alt=\"\" />\n                  </ImgWrap>\n                ) : (\n                  <div>Not found</div>\n                )}\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We dont have cast for this movie</p>\n      )}\n\n      {error && <p>'Sorry, try again'</p>}\n    </div>\n  );\n}\n"],"names":["getMovies","axios","movies","data","fetchCast","id","cast","getCastById","setCast","setError","then","error","fetchReview","review","getReviewById","setReview","fetchMovie","movie","getMovieById","setMovie","searchMovie","query","result","searchMovieByQuery","setState","res","console","log","message","ImgWrap","styled","Img","CastContent","useState","movieId","useParams","useEffect","map","name","character","profile_path","src","alt"],"sourceRoot":""}